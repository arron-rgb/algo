package edu.neu.algo.leetcode.editor.en.$!velocityTool.date("_yyyyMMdd");

// 现在的流程
// 1. getQuestion
// 2. 通过template生成代码
// 3. template内读取question的数据，代替占位符
// 4. template做的操作: 1. 生成Wrapper 2. 生成main方法 3. 加入question的题干 4. 加入question的实体类

// 我想要实现
// 1. 外部是QuestionWrapper类
// 2. main方法里使用print出来的内容
// 3.


import edu.neu.util.InputUtil;

public class $!velocityTool.camelCaseName(${question.title}){

  ${question.content}
  public static void main(String[] args) {
    #if (!${question.isDesign})

        Solution solution = new $!velocityTool.camelCaseName(${question.title})().new Solution();
        String[] data = """
        ${question.exampleTestcases}""".trim().replaceAll("\n", "|").split("\\|");
        String[] paramTypes = InputUtil.param("${question.paramTypes}");
        Object[] params = new Object[data.length];
        for (int i = 0; i < data.length; i++) {
          params[i] = InputUtil.get(data[i], paramTypes[i % paramTypes.length]);
        }
        int loop = data.length / paramTypes.length;
        for (int i = 0; i < loop; i++) {
          ${question.returnType} q = solution.${question.functionName}(
          #foreach( $c in ${question.paramTypes})
          ($c)params[$foreach.count -1 + i * paramTypes.length]
          #if ($foreach.count < ${question.paramTypes.size()}) ,
          #end
          #end
          );
          System.out.println(q);
        }
    #else
    ${question.designCode}
    #end
  }
  ${question.code}
}
