  class Solution {

    public int rob(int[] nums) {
      // 当前操作: 第i个房子选还是不选
      // 子问题: 前i-1个房子选还是不选
      // 不选: 前i-1的max 选: 前i-2的max+当前

      int n = nums.length;
      if (n == 1) {
        return nums[0];
      }
      if (n == 2) {
        return Math.max(nums[0], nums[1]);
      }
      int[] dp = new int[n + 1];
      dp[0] = nums[0];
      dp[1] = Math.max(nums[0], nums[1]);
      // 为什么要用dp?
      // 子问题: 前i-1个房子选还是不选
      // dp[i] 表示 i个房子的最优解
      for (int i = 2; i < n; i++) {
        dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i]);
      }
      return dp[n - 1];
    }

  }

//runtime:0 ms
//memory:39.4 MB
