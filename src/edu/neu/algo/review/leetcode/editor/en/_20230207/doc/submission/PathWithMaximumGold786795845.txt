class Solution {
    public int getMaximumGold(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int max = 0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j] != 0){
                    max = Math.max(dfs(grid, i, j), max);
                }
            }
        }
        return max;
    }
    
    int dfs(int[][] grid, int i, int j){
        if(i<0|| j<0 || i>=grid.length || j>=grid[0].length || grid[i][j] == 0){
            return 0;
        }
        
        int tmp = grid[i][j];
        grid[i][j] = 0;
        int left = dfs(grid, i+1, j);
        int right = dfs(grid, i-1, j);
        int up = dfs(grid, i, j-1);
        int down = dfs(grid, i, j+1);
        grid[i][j] = tmp;
        return tmp + Math.max(Math.max(left, right), Math.max(up, down));
    }
}
//runtime:76 ms
//memory:41.9 MB
