  class Solution {
    int count = 0;

    public int countArrangement(int n) {
      if (n == 0) {
        return 0;
      }
      dfs(n, 1, new boolean[n + 1]);
      return count;
    }

    void dfs(int n, int index, boolean[] visited) {
      if (index > n) {
        count++;
        return;
      }

      for (int i = 1; i <= n; i++) {
        if (!visited[i] && (i % index == 0 || index % i == 0)) {
          visited[i] = true;
          dfs(n, index + 1, visited);
          visited[i] = false;
        }
      }
    }
  }
//runtime:112 ms
//memory:40.6 MB
