  class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
      // [1,1,2,5,6,7,10]
      List<List<Integer>> res = new ArrayList<>();
      Arrays.sort(candidates);
      dfs(res, new ArrayList<>(), candidates, target, 0);
      return res;
    }

    void dfs(List<List<Integer>> res, List<Integer> cur, int[] candidates, int target, int index) {
      if (target == 0) {
        res.add(new ArrayList<>(cur));
        return;
      }
      for (int i = index; i < candidates.length; i++) {
        int candidate = candidates[i];
        if (i > index && candidate == candidates[i - 1]) {
          continue;
        }
        if (target < candidate) {
          break;
        }
        // take this number
        cur.add(candidate);
        dfs(res, cur, candidates, target - candidate, i + 1);
        cur.remove(cur.size() - 1);
        // pass
        // dfs(res, cur, candidates, target, i + 1);
      }
    }
  }

//runtime:2 ms
//memory:42.6 MB
