  class Solution {
    public int[] corpFlightBookings(int[][] bookings, int n) {
      int m = bookings.length;
      int[][] nums = new int[m * 2][3];
      int i = 0;
      for (int[] booking : bookings) {
        nums[i++] = new int[] {booking[0], booking[2], 1};
        // 因为在时刻booking[1]的时候仍然算reserved
        nums[i++] = new int[] {booking[1] + 1, booking[2], -1};
      }
      Arrays.sort(nums, (o1, o2) -> {
        if (o1[0] == o2[0]) {
          return o1[2] - o2[2];
        }
        return o1[0] - o2[0];
      });
      int[] res = new int[n];
      int count = 0;
      for (int[] num : nums) {
        if (num[0] <= n) {
          count += num[1] * num[2];
          res[num[0] - 1] = count;
        } else {
          res[n - 1] = count;
          break;
        }
      }

      return res;
    }
  }

//total_testcases:
//total_correct:
//input_formatted:
//expected_output:
//code_output:
//last_testcase:[[3,3,5],[1,3,20],[1,2,15]]
3
