package edu.neu.algo.leetcode.editor.en._20220706;

import java.util.ArrayDeque;
import java.util.Deque;

import edu.neu.util.InputUtil;

public class SumOfSubarrayMinimums {
  // 907
  // Given an array of integers arr, find the sum of min(b), where b ranges over
  // every (contiguous) subarray of arr. Since the answer may be large, return the
  // answer modulo 10‚Åπ + 7.
  //
  //
  // Example 1:
  //
  //
  // Input: arr = [3,1,2,4]
  // Output: 17
  // Explanation:
  // Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,
  // 2,4].
  // Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.
  // Sum is 17.
  //
  //
  // Example 2:
  //
  //
  // Input: arr = [11,81,94,43,3]
  // Output: 444
  //
  //
  //
  // Constraints:
  //
  //
  // 1 <= arr.length <= 3 * 10‚Å¥
  // 1 <= arr[i] <= 3 * 10‚Å¥
  //
  // Related Topics Array Dynamic Programming Stack Monotonic Stack üëç 3785 üëé 250
  //

  public static void main(String[] args) {
    Solution solution = new SumOfSubarrayMinimums().new Solution();
    String[] data = """
          [3,1,2,4]
      [11,81,94,43,3]
          """.trim().replaceAll("\n", "|").split("\\|");
    String[] paramTypes = InputUtil.param("[int[]]");
    Object[] params = new Object[data.length];
    for (int i = 0; i < data.length; i++) {
      params[i] = InputUtil.get(data[i], paramTypes[i % paramTypes.length]);
    }
    int loop = data.length / paramTypes.length;
    for (int i = 0; i < loop; i++) {
      int q = solution.sumSubarrayMins((int[])params[1 - 1 + i * paramTypes.length]);
      System.out.println(q);
    }
  }

  // leetcode submit region begin(Prohibit modification and deletion)
  class Solution {
    int mod = (int)(1e9 + 7);
    // ÂØπ‰∫éÊØè‰∏Ä‰∏™ÂÖÉÁ¥† eÔºåÂèØ‰ª•ËÆ©ÂÆÉ‰Ωú‰∏∫ÊúÄÂ∞èÂÄºÁöÑÈÇ£‰∫õÊï∞ÁªÑÂøÖÂÆöÂú®ËøôÊ†∑ÁöÑÂå∫Èó¥ (a,b) ÂÜÖÔºåÂÖ∂‰∏≠ a ‰∏∫ e Â∑¶ËæπÁ¨¨‰∏Ä‰∏™Â∞è‰∫éÁ≠â‰∫éÂÆÉÁöÑÂÄºÁöÑ‰ΩçÁΩÆÔºåb ‰∏∫ e Âè≥ËæπÁ¨¨‰∏Ä‰∏™Â∞è‰∫éÂÆÉÁöÑÂÄºÁöÑ‰ΩçÁΩÆ„ÄÇ
    //
    // ÁÆÄË®Ä‰πãÔºåÂØªÊâæ‰ª•ÊØè‰∏™ÂÖÉÁ¥†‰Ωú‰∏∫ÊúÄÂ∞èÂÄºÊó∂ÁöÑÊúÄÈïøÂ≠êÊï∞ÁªÑÂå∫Èó¥„ÄÇ
    //
    // ÊâÄ‰ª•Ê†∏ÂøÉÈóÆÈ¢òÂíåËøô‰∏§ÈÅìÈ¢òÔºà1856. Â≠êÊï∞ÁªÑÊúÄÂ∞è‰πòÁßØÁöÑÊúÄÂ§ßÂÄº„ÄÅ84. Êü±Áä∂Âõæ‰∏≠ÊúÄÂ§ßÁöÑÁü©ÂΩ¢ÔºâÊ≤°ÊúâÂ∑ÆÂà´„ÄÇ
    //
    // ÊúÄÁõ¥Êé•ÁöÑÂäûÊ≥ïÂ∞±ÊòØ‰ªéÊØè‰∏™ÂÖÉÁ¥†ÂºÄÂßãÂêë‰∏§ËæπÊêúÁ¥¢ÂØπÂ∫îÁöÑ a Âíå b Âç≥ÂèØÔºåÊõ¥‰ºòÂåñÁöÑÂäûÊ≥ïÂêåÊ†∑ÊòØ‰ΩøÁî®ÂçïË∞ÉÈÄíÂ¢ûÊ†à„ÄÇ
    //
    // Âå∫Èó¥ (a, b) ÂÜÖÁöÑÊâÄÊúâÂåÖÂê´ÂÖÉÁ¥† e ÁöÑÊï∞ÁªÑ‰∏™Êï∞ÁöÑËÆ°ÁÆóÂÖ¨Âºè‰∏∫Ôºö(a - b - 1) + (idx - a - 1) * (b - idx - 1)„ÄÇÂÖ∂‰∏≠ idx ‰∏∫ÂÖÉÁ¥† e ÁöÑÁ¥¢Âºï‰ΩçÁΩÆ„ÄÇ

    public int sumSubarrayMins(int[] arr) {
      int n = arr.length;
      int[] dp = new int[n + 1];
      Deque<Integer> deque = new ArrayDeque<>();
      for (int i = 0; i < n; i++) {
        while (!deque.isEmpty() && arr[i] <= arr[deque.peekLast()]) {
          deque.pollLast();
        }
        int top = deque.isEmpty() ? -1 : deque.peekLast();
        dp[i + 1] = (dp[top + 1] + (i - top) * arr[i]) % mod;
        deque.offerLast(i);
      }
      int sum = 0;
      for (int i : dp) {
        sum += i;
        sum %= mod;
      }
      return sum;
    }
  }
  // leetcode submit region end(Prohibit modification and deletion)

}
