朋友
故乡

需要把近期提交的题目，提交过的代码pull下来，
1. 保存题目的标签、题号、题目描述
2. 提交过的代码，提交时间

// 近期提交
{"operationName":"userProfileQuestions","variables":{"status":"ACCEPTED","skip":0,"first":20,"sortField":"LAST_SUBMITTED_AT","sortOrder":"DESCENDING","difficulty":[]},"query":"query userProfileQuestions($status: StatusFilterEnum!, $skip: Int!, $first: Int!, $sortField: SortFieldEnum!, $sortOrder: SortingOrderEnum!, $keyword: String, $difficulty: [DifficultyEnum!]) {\n  userProfileQuestions(status: $status, skip: $skip, first: $first, sortField: $sortField, sortOrder: $sortOrder, keyword: $keyword, difficulty: $difficulty) {\n    totalNum\n    questions {\n      translatedTitle\n      frontendId\n      titleSlug\n      title\n      difficulty\n      lastSubmittedAt\n      numSubmitted\n      lastSubmissionSrc {\n        sourceType\n        ... on SubmissionSrcLeetbookNode {\n          slug\n          title\n          pageId\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}

// 返回
{"data":{"userProfileQuestions":{"totalNum":224,"questions":[{"translatedTitle":"\u6700\u9ad8\u9891\u5143\u7d20\u7684\u9891\u6570","frontendId":"1838","titleSlug":"frequency-of-the-most-frequent-element","title":"Frequency of the Most Frequent Element","difficulty":"MEDIUM","lastSubmittedAt":1657345876,"numSubmitted":3,"lastSubmissionSrc":null,"__typename":"ProgressQuestionNode"},{"translatedTitle":"\u673a\u5668\u4eba\u5927\u5192\u9669","frontendId":"LCP 03","titleSlug":"programmable-robot","title":"Programmable Robot","difficulty":"MEDIUM","lastSubmittedAt":1657343100,"numSubmitted":2,"lastSubmissionSrc":null,"__typename":"ProgressQuestionNode"},{"translatedTitle":"\u76d1\u63a7\u4e8c\u53c9\u6811","frontendId":"968","titleSlug":"binary-tree-cameras","title":"Binary Tree Cameras","difficulty":"HARD","lastSubmittedAt":1657341283,"numSubmitted":2,"lastSubmissionSrc":null,"__typename":"ProgressQuestionNode"},{"translatedTitle":"\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148","frontendId":"236","titleSlug":"lowest-common-ancestor-of-a-binary-tree","title":"Lowest Common Ancestor of a Binary Tree","difficulty":"MEDIUM","lastSubmittedAt":1657338996,"numSubmitted":3,"lastSubmissionSrc":null,"__typename":"ProgressQuestionNode"},{"translatedTitle":"\u9876\u7aef\u8fed\u4ee3\u5668","frontendId":"284","titleSlug":"peeking-iterator","title":"Peeking Iterator","difficulty":"MEDIUM","lastSubmittedAt":1657334311,"numSubmitted":5,"lastSubmissionSrc":null,"__typename":"ProgressQuestionNode"},{"translatedTitle":"\u6805\u680f\u6d82\u8272","frontendId":"276","titleSlug":"paint-fence","title":"Paint Fence","difficulty":"MEDIUM","lastSubmittedAt":1657333786,"numSubmitted":1,"lastSubmissionSrc":null,"__typename":"ProgressQuestionNode"},{"translatedTitle":"\u5c55\u5f00\u4e8c\u7ef4\u5411\u91cf","frontendId":"251","titleSlug":"flatten-2d-vector","title":"Flatten 2D Vector","difficulty":"MEDIUM","lastSubmittedAt":1657333266,"numSubmitted":5,"lastSubmissionSrc":null,"__typename":"ProgressQuestionNode"},{"translatedTitle":"\u6700\u4f73\u7684\u78b0\u5934\u5730\u70b9","frontendId":"296","titleSlug":"best-meeting-point","title":"Best Meeting Point","difficulty":"HARD","lastSubmittedAt":1657332777,"numSubmitted":4,"lastSubmissionSrc":null,"__typename":"ProgressQuestionNode"},{"translatedTitle":"\u7c89\u5237\u623f\u5b50 II","frontendId":"265","titleSlug":"paint-house-ii","title":"Paint House II","difficulty":"HARD","lastSubmittedAt":1657332450,"numSubmitted":1,"lastSubmissionSrc":null,"__typename":"ProgressQuestionNode"},{"translatedTitle":"\u7c89\u5237\u623f\u5b50","frontendId":"256","titleSlug":"paint-house","title":"Paint House","difficulty":"MEDIUM","lastSubmittedAt":1657332275,"numSubmitted":4,"lastSubmissionSrc":null,"__typename":"ProgressQuestionNode"},{"translatedTitle":"\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5220\u9664\u64cd\u4f5c","frontendId":"583","titleSlug":"delete-operation-for-two-strings","title":"Delete Operation for Two Strings","difficulty":"MEDIUM","lastSubmittedAt":1657315071,"numSubmitted":2,"lastSubmissionSrc":null,"__typename":"ProgressQuestionNode"},{"translatedTitle":"\u6700\u957f\u7684\u6590\u6ce2\u90a3\u5951\u5b50\u5e8f\u5217\u7684\u957f\u5ea6","frontendId":"873","titleSlug":"length-of-longest-fibonacci-subsequence","title":"Length of Longest Fibonacci Subsequence","difficulty":"MEDIUM","lastSubmittedAt":1657308300,"numSubmitted":1,"lastSubmissionSrc":null,"__typename":"ProgressQuestionNode"},{"translatedTitle":"\u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84","frontendId":"797","titleSlug":"all-paths-from-source-to-target","title":"All Paths From Source to Target","difficulty":"MEDIUM","lastSubmittedAt":1657307479,"numSubmitted":1,"lastSubmissionSrc":null,"__typename":"ProgressQuestionNode"},{"translatedTitle":"\u91cd\u65b0\u6392\u5217\u6570\u7ec4","frontendId":"1470","titleSlug":"shuffle-the-array","title":"Shuffle the Array","difficulty":"EASY","lastSubmittedAt":1657258855,"numSubmitted":2,"lastSubmissionSrc":null,"__typename":"ProgressQuestionNode"},{"translatedTitle":"\u96c7\u4f63 K \u540d\u5de5\u4eba\u7684\u6700\u4f4e\u6210\u672c","frontendId":"857","titleSlug":"minimum-cost-to-hire-k-workers","title":"Minimum Cost to Hire K Workers","difficulty":"HARD","lastSubmittedAt":1657218127,"numSubmitted":1,"lastSubmissionSrc":null,"__typename":"ProgressQuestionNode"},{"translatedTitle":"\u63a5\u96e8\u6c34","frontendId":"42","titleSlug":"trapping-rain-water","title":"Trapping Rain Water","difficulty":"HARD","lastSubmittedAt":1657217833,"numSubmitted":1,"lastSubmissionSrc":null,"__typename":"ProgressQuestionNode"},{"translatedTitle":"\u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20 I","frontendId":"496","titleSlug":"next-greater-element-i","title":"Next Greater Element I","difficulty":"EASY","lastSubmittedAt":1657213195,"numSubmitted":3,"lastSubmissionSrc":null,"__typename":"ProgressQuestionNode"},{"translatedTitle":"\u5355\u8bcd\u63a5\u9f99","frontendId":"127","titleSlug":"word-ladder","title":"Word Ladder","difficulty":"HARD","lastSubmittedAt":1657212171,"numSubmitted":1,"lastSubmissionSrc":null,"__typename":"ProgressQuestionNode"},{"translatedTitle":"\u5220\u9664\u94fe\u8868\u7684\u4e2d\u95f4\u8282\u70b9","frontendId":"2095","titleSlug":"delete-the-middle-node-of-a-linked-list","title":"Delete the Middle Node of a Linked List","difficulty":"MEDIUM","lastSubmittedAt":1657210520,"numSubmitted":1,"lastSubmissionSrc":null,"__typename":"ProgressQuestionNode"},{"translatedTitle":"\u73a9\u7b79\u7801","frontendId":"1217","titleSlug":"minimum-cost-to-move-chips-to-the-same-position","title":"Minimum Cost to Move Chips to The Same Position","difficulty":"EASY","lastSubmittedAt":1657210247,"numSubmitted":1,"lastSubmissionSrc":null,"__typename":"ProgressQuestionNode"}],"__typename":"ProgressQuestionListNode"}}}

// 某题的提交
{"operationName":"progressSubmissions","variables":{"offset":0,"limit":10,"questionSlug":"frequency-of-the-most-frequent-element"},"query":"query progressSubmissions($offset: Int, $limit: Int, $lastKey: String, $questionSlug: String) {\n  submissionList(offset: $offset, limit: $limit, lastKey: $lastKey, questionSlug: $questionSlug) {\n    lastKey\n    hasNext\n    submissions {\n      id\n      timestamp\n      url\n      lang\n      runtime\n      __typename\n    }\n    __typename\n  }\n}\n"}
// 返回
{"data":{"submissionList":{"lastKey":"o5wb2esft","hasNext":false,"submissions":[{"id":"334580478","timestamp":"1657345876","url":"/submissions/detail/334580478/","lang":"java","runtime":"44 ms","__typename":"SubmissionDumpNode"},{"id":"334580090","timestamp":"1657345782","url":"/submissions/detail/334580090/","lang":"java","runtime":"28 ms","__typename":"SubmissionDumpNode"},{"id":"334580000","timestamp":"1657345763","url":"/submissions/detail/334580000/","lang":"java","runtime":"42 ms","__typename":"SubmissionDumpNode"}],"__typename":"SubmissionListNode"}}}



public static int boardGame(List<Integer> board, List<String> moves, int playerId) {
    Map<String, Integer> map = new HashMap<>();
    Map<String, Integer> score = new HashMap<>();
    int max = board.size();
    for (String move : moves) {
      try {
        boolean validateMessage = !move.contains("\\|");
        if (!validateMessage || move.isEmpty()) {
          System.err.println("error message: " + move);
          continue;
        }
        String[] elements = move.split("\\|");
        for (String element : elements) {
          if (!element.contains(":")) {
            validateMessage = false;
            break;
          }
        }
        if (!validateMessage) {
          System.err.println("error command: " + move);
          continue;
        }
        String player = elements[0].split(":")[1].trim();
        String command = elements[1].split(":")[1].trim();
        String value = elements[2].split(":")[1].trim();
        if ("FORWARD".equals(command)) {
          int tmp = map.getOrDefault(player, 0);
          int tmpScore = score.getOrDefault(player, 0);
          int distance = Integer.parseInt(value);
          for (int i = 1; i <= Math.min(max - 1, distance); i++) {
            if (tmp + i < max) {
              tmpScore += board.get(tmp + i);
              board.set(tmp + i, 0);
            } else {
              break;
            }
          }
          score.put(player, tmpScore);
          map.put(player, tmp + distance);
        }else if("SWAP".equals(command)){
          int firstPlace = map.getOrDefault(player, 0);
          int secondPlace = map.getOrDefault(value, 0);
          map.put(player, secondPlace);
          map.put(value, firstPlace);
        }else if("BACKWARD".equals(command)){
          int tmp = map.getOrDefault(player, 0);
          int tmpScore = score.getOrDefault(player, 0);
          int distance = Integer.parseInt(value);
          for (int i = 1; i <= Math.min(max - 1, distance); i++) {
            if (tmp + i >= 0) {
              tmpScore += board.get(tmp - i);
              board.set(tmp + i, 0);
            } else {
              break;
            }
          }
          score.put(player, tmpScore);
          map.put(player, Math.max(tmp - distance, 0));
        } else {
          System.err.println("error command: " + board);
        }
      } catch (Exception e) {
        System.err.println("error message: " + move);
      }
    }
    return score.getOrDefault("" + playerId, 0);
  }
}
